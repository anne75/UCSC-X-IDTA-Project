y<-ifelse ((x[,1]=="S")|(x[,1]=="W"), -y,y)
}
L<-convert(lat)
LL<-convert(lg)
position<-data.frame("lat"=L,"long"=LL)
##############
# IMO accidents
##############
#### Loading
### data was downloaded as pdf
### it was then transformed into a csv file in python and read here
shipAcc<-list()
i<-1
fileExtension<-c("1998", "1999", "2000","2001","2002","2003")
cC<-c(NA, "character","NULL",rep("character",6),rep("NULL",2), "character", "NULL",
"character", "numeric", "character", "NULL")
for (letter in fileExtension) {
myfile<-paste0("casualty",letter,"clean.csv")
shipAcc[[i]]<-read.csv(myfile, stringsAsFactors=F, colClasses=cC, header=F)
i<-i+1
}
casualty<-do.call(rbind, shipAcc)
names(casualty)<-c("dataSource", "flagState", "date", "casLife",
"lat", "long", "fatalities", "injuries", "consequence", "shipType", "DOB", "category")
#### Cleaning, in feature order
#data source
#flagState
cleanflag<-function(x) {
x<-toupper(x)
x[grepl("^CHINA", x)]<-"CHINA"
x[grepl("^MARSHALL", x)]<-"MARSHALL ISLANDS"
x<-gsub("KINGDON","KINGDOM",x)
x<-gsub("S REP$"," REPUBLIC OF",x)
x<-gsub(" BARGUDA", " BARBUDA",x)
x<-gsub("VIET NAM","VIETNAM", x)
x<-gsub("&","AND", x)
x<-gsub("NETHERLANDS,","NETHERLANDS", x)
return(x)
}
casualty$flagState<-cleanflag(casualty$flagState)
#date
dateclean<-function(x) {
temp<-dmy(x)
f3<-function(x) ifelse(x<2000, x+1900, x)
year(temp)<-sapply(year(temp),f3)
return(temp)
}
casualty$date<-dateclean(casualty$date)
#casLife (was someone injured or killed)
temp1<-gsub(" \\(.*\\)","",casualty$casLife)
temp1<-gsub("Casualty","Serious casualty", temp1)
#je ne distingue pas ou a eu lieu le drame, c'est l'accident qui compte
#reste un Casualty tout seul
casualty$casLife<-as.factor(temp1)
#lat and long
fmin<-function(x, pattern) {
y<-ifelse(grepl(pattern,x),regmatches(x,regexec(pattern,x)), "0")
}
library(plyr)
convert2<-function(x) {
l1<-do.call(rbind,strsplit(x,"o"))
l2<-ldply(sapply(l1[,2], fmin, "^[0-9]+"))[,2] #I need only the values, not any name
l3<-ldply(sapply(l1[,2], fmin, "\\.[0-9]+"))[,2]
l4<-ldply(sapply(l1[,2], fmin, "[A-Z]"))[,2]
l5<-as.numeric(l1[,1])+as.numeric(l2)/60+as.numeric(l3)
l5<-ifelse ((l4=="S")|(l4=="W"), -l5,l5)
return(l5)
}
casualty$lat<-convert2(casualty$lat)
casualty$long<-convert2(casualty$long)
#fatalities and injuries
casualty$fatalities<-as.numeric(casualty$fatalities)
casualty$injuries<-as.numeric(casualty$injuries)
#consequence
cleantype<-function(x) {
bkdnwithshore<-grepl("^B(.*)", x) & !grepl("^B(.*)g", x)
x[bkdnwithshore]<-"Breakdown with shore assistance"
x[grepl("^C(.*)", x)]<-"Constructive total loss"
x<-gsub(" \\(.*\\)","",x)
x[grepl("[Hh]ull", x)]<-"Structural damage"
x[grepl("Tot(.*)lif(.*)*",x)]<-"Total loss and loss of life"
x[grepl("Tot(.*)shi(.*)*",x)]<-"Total loss"
return(x)
}
casualty$consequence<-cleantype(casualty$consequence)
#shipType
cleanship<-function(x) {
x<-toupper(x)
x[grepl("BA(.*)",x)]<-"BARGE"
x[grepl("BULK",x)]<-"BULK CARRIER"
x[grepl("FISH",x)]<-"FISH RELATED SHIP"
x[grepl("GAS ",x)]<-"GAS CARRIER"
x[grepl("ICE(.*) ",x)]<-"ICEBREAKER"
x[grepl("^RO(.*)",x)]<-"RO-RO CARGO SHIP"
x[grepl("^TA(.*) ",x)]<-"TANKER"
x[grepl("TUG",x)]<-"TUG"
x[grepl("^VEH(.*)",x)]<-"VEHICLES CARRIER"
return(x)
}
casualty$shipType<-cleanship(casualty$shipType)
#shipYear
#nothing
#category
cleancat<-function(x){
x[grepl("^Cap(.*)",x)]<-"Capsize"
x[grepl("Fail(.*)",x)]<-"Hull failure"
x[grepl("Fire and explosion",x)]<-"Fire/Explosion"
grounding<-grepl("Groun(.*)",x) | grepl("Stra(.*)",x)
x[grounding]<-"Grounding"
x[grepl("Other(/|$)",x)]<-"Unknown"
x[grepl("Work",x)]<-"Work-related accident"
x[grepl("Fall",x)]<-"Fall overboard"
return(x)
}
casualty$category<-cleancat(casualty$category)
rm(AA,AA2,lat,latlg,latlg2,lg, L,LL,cC,fileExtension,i,letter,myfile,mytxt,myzip,temp1)
getwd()
setwd("../projet IDTA")
setwd("~/projet IDTA")
setwd("~/projet IDTA")
rm(list=ls())
library("ggplot2")
library("ggmap")
library("mapdata")
library("lubridate")
library("plyr") #always put before following
library("dplyr")
###################################################################################
#Cleaning
#######
#Ship positions
#######
##### Loading
shipPos<-list()
i<-1
fileExtension<-c("A", "E", "O","S","Y","I")
load3<-function(file) {
tempFile<-read.table(file, sep="\t", quote="",fill=T, header=T, stringsAsFactors=F)
tempFile<-tempFile[-which(tempFile$position==""),-c(4,5)]
return(tempFile)
}
for (letter in fileExtension) {
myfile<-paste0("ship",letter)
myzip<-paste0(myfile,".zip")
mytxt<-paste0(myfile,".txt")
shipPos[[i]]<-load3(unz(myzip, mytxt))
i<-i+1
}
AA<-do.call(rbind, shipPos)
AA2<-unique(AA) #184 000 unique positions, a dataframe
#### Cleaning
latlg<-do.call(rbind,strsplit(AA2$position, ", "))
f<-function(x) gsub("'","",x)
latlg2<-apply(latlg,c(1,2),FUN=f)
f2<-function(x) strsplit(x,"[ \\Â°]")
library("plyr")
lat<-ldply(sapply(latlg2[,1],FUN=f2))
lg<-ldply(sapply(latlg2[,2],FUN=f2))
lat<-lat[,-1]
lg<-lg[,-1]
convert<-function(x) {
y<-as.numeric(x[,2])+as.numeric(x[,3])/60
y<-ifelse ((x[,1]=="S")|(x[,1]=="W"), -y,y)
}
L<-convert(lat)
LL<-convert(lg)
position<-data.frame("lat"=L,"long"=LL)
##############
# IMO accidents
##############
#### Loading
### data was downloaded as pdf
### it was then transformed into a csv file in python and read here
shipAcc<-list()
i<-1
fileExtension<-c("1998", "1999", "2000","2001","2002","2003")
cC<-c(NA, "character","NULL",rep("character",6),rep("NULL",2), "character", "NULL",
"character", "numeric", "character", "NULL")
for (letter in fileExtension) {
myfile<-paste0("casualty",letter,"clean.csv")
shipAcc[[i]]<-read.csv(myfile, stringsAsFactors=F, colClasses=cC, header=F)
i<-i+1
}
casualty<-do.call(rbind, shipAcc)
names(casualty)<-c("dataSource", "flagState", "date", "casLife",
"lat", "long", "fatalities", "injuries", "consequence", "shipType", "DOB", "category")
#### Cleaning, in feature order
#data source
#flagState
cleanflag<-function(x) {
x<-toupper(x)
x[grepl("^CHINA", x)]<-"CHINA"
x[grepl("^MARSHALL", x)]<-"MARSHALL ISLANDS"
x<-gsub("KINGDON","KINGDOM",x)
x<-gsub("S REP$"," REPUBLIC OF",x)
x<-gsub(" BARGUDA", " BARBUDA",x)
x<-gsub("VIET NAM","VIETNAM", x)
x<-gsub("&","AND", x)
x<-gsub("NETHERLANDS,","NETHERLANDS", x)
return(x)
}
casualty$flagState<-cleanflag(casualty$flagState)
#date
dateclean<-function(x) {
temp<-dmy(x)
f3<-function(x) ifelse(x<2000, x+1900, x)
year(temp)<-sapply(year(temp),f3)
return(temp)
}
casualty$date<-dateclean(casualty$date)
#casLife (was someone injured or killed)
temp1<-gsub(" \\(.*\\)","",casualty$casLife)
temp1<-gsub("Casualty","Serious casualty", temp1)
#je ne distingue pas ou a eu lieu le drame, c'est l'accident qui compte
#reste un Casualty tout seul
casualty$casLife<-as.factor(temp1)
#lat and long
fmin<-function(x, pattern) {
y<-ifelse(grepl(pattern,x),regmatches(x,regexec(pattern,x)), "0")
}
library(plyr)
convert2<-function(x) {
l1<-do.call(rbind,strsplit(x,"o"))
l2<-ldply(sapply(l1[,2], fmin, "^[0-9]+"))[,2] #I need only the values, not any name
l3<-ldply(sapply(l1[,2], fmin, "\\.[0-9]+"))[,2]
l4<-ldply(sapply(l1[,2], fmin, "[A-Z]"))[,2]
l5<-as.numeric(l1[,1])+as.numeric(l2)/60+as.numeric(l3)
l5<-ifelse ((l4=="S")|(l4=="W"), -l5,l5)
return(l5)
}
casualty$lat<-convert2(casualty$lat)
casualty$long<-convert2(casualty$long)
#fatalities and injuries
casualty$fatalities<-as.numeric(casualty$fatalities)
casualty$injuries<-as.numeric(casualty$injuries)
#consequence
cleantype<-function(x) {
bkdnwithshore<-grepl("^B(.*)", x) & !grepl("^B(.*)g", x)
x[bkdnwithshore]<-"Breakdown with shore assistance"
x[grepl("^C(.*)", x)]<-"Constructive total loss"
x<-gsub(" \\(.*\\)","",x)
x[grepl("[Hh]ull", x)]<-"Structural damage"
x[grepl("Tot(.*)lif(.*)*",x)]<-"Total loss and loss of life"
x[grepl("Tot(.*)shi(.*)*",x)]<-"Total loss"
return(x)
}
casualty$consequence<-cleantype(casualty$consequence)
#shipType
cleanship<-function(x) {
x<-toupper(x)
x[grepl("BA(.*)",x)]<-"BARGE"
x[grepl("BULK",x)]<-"BULK CARRIER"
x[grepl("FISH",x)]<-"FISH RELATED SHIP"
x[grepl("GAS ",x)]<-"GAS CARRIER"
x[grepl("ICE(.*) ",x)]<-"ICEBREAKER"
x[grepl("^RO(.*)",x)]<-"RO-RO CARGO SHIP"
x[grepl("^TA(.*) ",x)]<-"TANKER"
x[grepl("TUG",x)]<-"TUG"
x[grepl("^VEH(.*)",x)]<-"VEHICLES CARRIER"
return(x)
}
casualty$shipType<-cleanship(casualty$shipType)
#shipYear
#nothing
#category
cleancat<-function(x){
x[grepl("^Cap(.*)",x)]<-"Capsize"
x[grepl("Fail(.*)",x)]<-"Hull failure"
x[grepl("Fire and explosion",x)]<-"Fire/Explosion"
grounding<-grepl("Groun(.*)",x) | grepl("Stra(.*)",x)
x[grounding]<-"Grounding"
x[grepl("Other(/|$)",x)]<-"Unknown"
x[grepl("Work",x)]<-"Work-related accident"
x[grepl("Fall",x)]<-"Fall overboard"
return(x)
}
casualty$category<-cleancat(casualty$category)
rm(AA,AA2,lat,latlg,latlg2,lg, L,LL,cC,fileExtension,i,letter,myfile,mytxt,myzip,temp1)
fzone<-function(df,lat1,lat2,long1,long2=-long1) {
cond<-with(df,(lat>lat1 & lat <lat2)&(long>long1 & long<long2))
df2<-df[with(df,cond),]
return(df2)
}
position$latCut<-cut(position$lat,breaks = seq(-90,90,length.out=11))
position$longCut<-cut(position$long,breaks = seq(-180,180,length.out=21))
poscut<-position%.%group_by(latCut, longCut)%.%summarise(position=n())
casualty$latCut<-cut(casualty$lat,breaks = seq(-90,90,length.out=11))
casualty$longCut<-cut(casualty$long,breaks = seq(-180,180,length.out=21))
cascut<-casualty%.%group_by(latCut, longCut)%.%summarise(casualty=n())
rs_cas<-casualty[casualty$latCut=="(0,18]" & casualty$longCut=="(36,54]",]
table(rs_cas$consequence)
rs_cas%.%goup_by(consequence)%.%summarise(count=n())%.%arrange(desc(count))
rs_cas%.%group_by(consequence)%.%summarise(count=n())%.%arrange(desc(count))
rs_cas%.%group_by(casLife)%.%summarise(count=n())%.%arrange(desc(count))
require(rCharts)
require(knitr)
knit2html("essaiRcharthtml.Rmd")
getwd()
setwd("~/workspace/R")
knit2html("essaiRcharthtml.Rmd")
knit2html("essaiRcharthtml.Rmd")
r1<-rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('figr1.html',cdn=TRUE)
knit2html("essaiRcharthtml.Rmd")
?sys.sleep
library(knitr)
library(markdown)
?render
Sys.sleep(3)
render("~/projet IDTA/UCSC-X-Project/Prject.Rmd",pdf_document)
library(ggplot2)
library(ggplot2)
render("~/projet IDTA/UCSC-X-Project/Prject.Rmd",pdf_document)
library(rmarkdown)
render("~/projet IDTA/UCSC-X-Project/Prject.Rmd",pdf_document)
render("~/projet IDTA/UCSC-X-Project/Project.Rmd",pdf_document)
render("~/projet IDTA/UCSC-X-IDTA-Project/Project.Rmd",pdf_document)
render("~/projet IDTA/UCSC-X-IDTA-Project/Project.Rmd","pdf_document")
getwd()
head(hair_eye)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
?nPlot
??nPlot
library(rCharts)
data(economics, package = 'ggplot2')
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = 'date', y = c('psavert', 'uempmed'), type = 'Line',
data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
morris
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
n2<-nplot(count~casType,group="casLife", data=df2, type="multiBarChart")
n2<-nPlot(count~casType,group="casLife", data=df2, type="multiBarChart")
n2
df2<-casfact%.%group_by(casType,category,casLife)%.%summarize(count=n())
df2<-casualty%.%group_by(casType,category,casLife)%.%summarize(count=n())
head(hair_eye_male)
str(casualty)
aggregate(.~casType+category+casLife, data=casualty,FUN = length)
aggregate(.~consequence+category+casLife, data=casualty,FUN = length)
casualty%.%group_by(consequence,category,casLife)%.%summarize(count=n())
df2<-casualty%.%group_by(consequence,category,casLife)%.%summarize(count=n())
head(hair_eye_male)
n2<-nPlot(count~casType,group="casLife", data=df2, type="multiBarChart")
n2
n2<-nPlot(count~consequence,group="casLife", data=df2, type="multiBarChart")
n2
u2<-uPlot("consequence","count",data=df2,group="casLife",type="stacked")
u2
u2<-uPlot("consequence","count",data=df2,group="casLife",type="stackedBar")
u2
n2<-nPlot(count~consequence,group="casLife", color="category" data=df2, type="multiBarChart")
n2
n2<-nPlot(count~consequence,group="casLife", color="category", data=df2, type="multiBarChart")
n2
u2<-uPlot("consequence","count",data=df2,group="casLife",type="stackedBar") #marche pas
u2
n2<-nPlot(count~consequence,group="category", data=df2, type="multiBarChart")
n2$addFilters("casLife")
n2
n2$set(dom = 'chart2', width = 600)
n2
n3<-nPlot(count~consequence|category, data=df2, type="Bar")
n3
n3<-nPlot(count~consequence|category, data=df2, type="multiBarChart")
n3
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90, height=20)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$chart( y = 150, height = 550 )
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$chart( y = 150, width = 550 )
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$chart(y = 1500, width = 5050)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$chart(y = 1500, height = 5050)
d2
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$params$height <- 400
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$params$height <- 10
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$params$height <- 100
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
d2$xAxis(rotateLabels=-90)
d2$params$height <- 300
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 50, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 10, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 5, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 1, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 0, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = -5, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 70, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 2, height = 400, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y = 2, height = 275, width = 500))
d2$xAxis(rotateLabels=-90)
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y =10, height = 250, width = 500))
d2$xAxis(rotateLabels=-90)
d2<-dPlot(x="count", y="consequence", groups="category", data=df2,type="bar",bounds = list(x = 50, y =10, height = 250, width = 500))
d2
casfact<-as.data.frame(lapply(casualty[,c(2,4,9,10,12)],function(x) as.factor(x)))
df3<-casfact%.%group_by(consequence,category,casLife)%.%summarize(count=n())
dPlot("count","consequence", groups="category",data=df3,type="bar")
d2
d2<-dPlot(x="consequence", y="count", groups="category", data=df2,type="bar",bounds = list(x = 50, y =2, height = 300, width = 500))
d2$xAxis(rotateLabels=-90)
d2$addFilters("casLife")
n2<-nPlot(count~consequence,group="category", data=df2, type="multiBarChart")
n2
n2$xAxis(rotateLabels=-90)
n2
n2<-nPlot(count~consequence,group="category", data=df2, type="bar")
n2
r2<-rPlot(x="consequence", y="count", groups="category", data=df2,type="bar")
r2
r2<-rPlot(x="consequence", y="count", group="category", data=df2,type="bar")
r2<-rPlot(count ~ consequence | category , group="category", data=df2,type="bar")
r2
r2<-rPlot(count ~ consequence, color="category", data=df2,type="bar")
r2
r2<-rPlot(count ~ consequence, color="category", data=df2,type="bar")
r2$xAxis(rotateLabels=-90)
r2$addFilters("casLife")
r2
n2<-nPlot(count~consequence,color="category", data=df2, type="bar")
n2$xAxis(rotateLabels=-90)
#p2a$addFilters("Sex")
#p2a$set(dom = 'chart2', width = 600)
n2$addFilters("casLife")
n2
n2<-nPlot(count~consequence,color="category", data=df2, type="bar")
n2
n2<-nPlot(count~consequence,fill="category", data=df2, type="bar")
n2
n2<-nPlot(count~consequence, group="category", data=df2, type="bar")
n2
n2<-nPlot(count~consequence, group="category", data=df2, type="StackedBar")
n2
u2<-uPlot("consequence","count",data=df2,group="casLife",type="stackedBar") #marche pas
u2
n2<-nPlot(count~consequence, group="category", data=df2, type="stackedBarChart")
n2$xAxis(rotateLabels=-90)
n2
n2<-nPlot(count~consequence, group="category", data=df2, type="stackedBar")
n2
n2<-nPlot(count~consequence, group="category", data=df2, type="multiBarChart")
n2
n2<-nPlot(count~consequence, group="category", data=df2, type="stackedBar")
n2
n2<-nPlot(count~consequence, group="category", data=df2, type="multiBarChart")
n2$chart(reduceXTicks = FALSE)
n2$xAxis(staggerLabels = TRUE)
n2
library(FactoMineR)
library(Rcmdr)
casfac<-cbind(casfact,"day"=day(casualty$date),
"month"=as.numeric(month(casualty$date)), "year"=year(casualty$date),"DOB"=casualty$DOB)
FAMD(casfac)
setwd("~/projet IDTA/UCSC-X-IDTA-Project")
render("Project.Rmd",output_format = "HTML",clean = FALSE)
render("Project.Rmd","html_document,clean = FALSE)
)
''
""
""
render("Project.Rmd","html_document",clean = FALSE)
render("Project.Rmd","html_document",clean = FALSE)
